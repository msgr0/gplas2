#!/bin/bash

##to debug
#set -e
#set -v
#set -x

########################################
## A bash script to run the gplas pipeline
## This script has been converted and transformed from the script present in the gitlab repo 'bactofidia' by aschuerch

while getopts ":i:k:n:s:c:t:x:r:f:e:q:h" opt; do
 case $opt in
   h)
   cat figures/logo.txt
   echo -e "Welcome to the user guide of gplas (version 0.8.0):\n"
   echo -e "Basic usage example: ./gplas.sh -i mygraph.gfa -c mlplasmids -s 'Enterococcus faecium'\n"
   echo -e "Input:\n \t -i \t Mandatory: Path to the graph file in *.gfa format used to extract nodes and links. Gfa file format\n"
   echo -e "Classifier:\n \t -c \t Mandatory: Classifier used to predict the contigs extracted from the input graph. String value: 'plasflow' or 'mlplasmids'\n"
   echo -e "Bacterial species: \n \t -s \t Mandatory (if mlplasmids is chosen): Bacterial species from the graph file. If you have specified mlplasmids as classifier
                 you need to provide one of the following three bacterial species:\n
                'Enterococcus faecium','Enterococcus faecalis', 'Klebsiella pneumoniae', 'Acinetobacter baumannii' or 'Escherichia coli'\n"

   echo -e "Output name:\n \t -n \t Optional: Output name used in the files generated by gplas. Default: 'unnamed'\n"
   echo -e "Settings:\n \t -t \t Optional: Threshold to predict plasmid-derived sequences. Integer value ranging from 0 to 1.
                 Default mlplasmids threshold: 0.5
                 Default plasflow threshold: 0.7\n"
   echo -e "\t -x \t Optional: Number of times gplas finds plasmid walks per each plasmid starting node. Integer value ranging from 1 to infinite.
                 Default: 20\n"
   echo -e "\t -f \t Optional: Gplas filtering threshold score to reject possible outcoming edges. Integer value ranging from 0 to 1.
                 Default: 0.1\n"
   echo -e "\t -q \t Optional: Modularity threshold to split components present in the plasmidome network. Integer value ranging from 0 to 1
                 Default: 0.2\n"
   echo -e "Benchmarking purposes: \n \t -r \t Optional: Path to the complete reference genome corresponding to the graph given. For optimal results using this
                 benchmarking flag, please name the reference genomes using the Unicycler scheme: e.g. '1 length=4123456' '2 length=10000' '3 length=2000'
                 for your chromosome and plasmids. Fasta file format"
   exit
   ;;
   i)
     input=$OPTARG
     ;;
   c)
     classifier=$OPTARG
     ;;
   n)
     name=$OPTARG
     ;;
   k)
     external=$OPTARG
     ;;
   s)
     species=$OPTARG
     ;;
   h)
     help=$OPTARG
     ;;
   t)
     threshold_prediction=$OPTARG
     ;;
   x)
     number_iterations=$OPTARG
     ;;
   f)
     filt_gplas=$OPTARG
     ;;
   e)
     edge_gplas=$OPTARG
     ;;
   q)
     modularity_threshold=$OPTARG
     ;;
   r)
     reference=$OPTARG
     ;;
   \?)
     ./gplas.sh -h
     echo -e "\n"
     echo "Invalid option: -$OPTARG" >&2
     echo "gplas requires a single input corresponding to a gfa file, use the following syntax:"
     exit 1
     ;;
   :)
     ./gplas.sh -h
     echo -e "\n"
     echo "Error: Option -$OPTARG requires an argument." >&2
     exit 1
     ;;
 esac
done

if [ -z "$input" ];
then
    ./gplas.sh -h
    echo -e "\n Error: Oops, it seems that you are missing the input graph.\n"
    exit
fi

if [ -z "$classifier" ];
then
    ./gplas.sh -h
    echo -e "\n Error: Oops, it seems that you are missing the classifier that you want to use.\n"
    exit
fi

if [ "$classifier" == "independent" ];
then
    echo -e "\n First step consists in extracting the contigs from the graph. Use this file as input for kraken"
fi

if [ "$classifier" == "mlplasmids" ];
then
  if [ -z "$species" ];
  then
      ./gplas.sh -h
      echo -e "\n Error: You have specified mlplasmids as classifier but you have not indicated one of the following three bacterial species:
      \t'Enterococcus faecium','Enterococcus faecalis', 'Klebsiella pneumoniae', 'Acinetobacter baumannii' or 'Escherichia coli'\n"
      exit
  fi
fi

list_species=(Enterococcus faecium Enterococcus faecalis Klebsiella pneumoniae Acinetobacter baumannii Escherichia coli);

if [ "$classifier" == "mlplasmids" ];
then
  if [[ " "${list_species[@]}" " == *" "$species" "* ]] ;then
      echo ""
  else
      echo -e "Ups! Something went wrong\n"
      echo -e "The provided species:" "$species" "is not included in mlplasmids. Valid species names are:\n"
      echo "${list_species[@]/%/,}"
      exit
  fi
fi

echo -e "\n"

cat figures/logo.txt

echo -e "\n"
echo "##################################################################"
echo -e "\n"

echo -e "This is your input graph:" $input "\n"

if [ -z "$species" ];
then
    echo -e "You did not indicate the bacterial species that you are using in the graph\n"
    species="unknown"
else
  echo -e "This is the bacterial species that you have indicated:" $species "\n"
  species=$(echo "'"$species"'")
fi

if [ -z "$name" ];
then
    echo -e "You did not pass an output name. Your results will be named as 'unnamed' \n"
    name="unnamed"
else
  echo -e "Your results will be named " $name "\n"
fi

if [ -z "$threshold_prediction" ];
then
  if [ "$classifier" == "plasflow" ];
  then
    echo -e "You did not indicate a threshold prediction. Using 0.7 because you are using plasflow\n"
    threshold_prediction=0.7
  else
    echo -e "You did not indicate a threshold prediction. Using 0.5 because you are using mlplasmids\n"
    threshold_prediction=0.5
  fi
else
  echo -e "You indicated a threshold prediction of:" $threshold_prediction "\n"
fi

if [ -z "$filt_gplas" ];
then
    filt_gplas=0.1
else
    echo -e "Using the following gplas filtering threshold score:" $filt_gplas "\n"
fi

if [ -z "$edge_gplas" ];
then
    edge_gplas=0.1
else
    echo -e "Using the following minimum frequency to select an edge:" $edge_gplas "\n"
fi

if [ -z "$number_iterations" ];
then
    echo -e "You did not pass the number of times to look for walks based on each plasmid seed, using 20 as default\n"
    number_iterations=20
else
  echo -e "You indicated a number of iterations of:" $number_iterations "\n"
fi

if [ -z "$modularity_threshold" ];
then
    modularity_threshold=0.2
else
    echo -e "Using the following gplas filtering threshold score:" $modularity_threshold "\n"
fi

if [ -z "$reference" ];
then
    reference="No reference provided"
else
  echo -e "You have given a reference genome to evaluate the results of gplas:" $reference
  mkdir -p reference_genome
  rm reference_genome/*
  cp $reference reference_genome/
  mv reference_genome/*.fasta reference_genome/"$name"_ref_genome.fasta
fi


echo "##################################################################"

cp templates/final.yaml templates/"$name"_assembly.yaml
cp templates/template.yml templates/"$name"_template.yaml

( echo "cat <<EOF >templates/"$name"_assembly.yaml";
  cat templates/"$name"_template.yaml;
  echo "EOF";
) > templates/"$name"_temp.yaml
. templates/"$name"_temp.yaml

sleep 1s

if command -v conda > /dev/null; then
 echo  -e 'Conda is present\n'
else
  echo -e "Conda is needed to run gplas.\n Please install conda before running gplas"
fi

echo -e "Creating (only the first-time) a conda environment to install and run snakemake"

eval "$(conda shell.bash hook)"

conda activate gplas || conda create --name gplas --file spec-snakemake.txt
conda activate gplas


if [ "$classifier" == "extract" ];
then
    echo -e "We need to extract the contigs first from the assembly graph, use later those contigs for your binary prediction" "\n"
    snakemake --unlock --use-conda --configfile templates/"$name"_assembly.yaml -s otherclassifiers.smk gplas_input/"$name"_raw_nodes.fasta
    snakemake --use-conda --configfile templates/"$name"_assembly.yaml -s otherclassifiers.smk gplas_input/"$name"_raw_nodes.fasta
    echo -e "Next step is to predict the extracted contigs with your desired binary classifier (e.g Kraken database)" "\n"
    exit
fi

if [ "$classifier" == "predict" ];
then
    echo -e "Resuming gplas using the prediction given by the user" "\n"
    snakemake --unlock --use-conda --configfile templates/"$name"_assembly.yaml -s otherclassifiers.smk results/"$name"_results.tab
    snakemake --use-conda --configfile templates/"$name"_assembly.yaml -s otherclassifiers.smk results/"$name"_results.tab
fi


if [ "$classifier" == "mlplasmids" ];
then
  if [ "$reference" == "No reference provided" ];
  then
      snakemake --unlock --configfile templates/"$name"_assembly.yaml --use-conda -s mlplasmidssnake.smk results/"$name"_results.tab 
      snakemake --use-conda --configfile templates/"$name"_assembly.yaml -s mlplasmidssnake.smk results/"$name"_results.tab
  else
      snakemake --unlock --use-conda --configfile templates/"$name"_assembly.yaml -s mlplasmidssnake.smk evaluation/"$name"_metrics.tab
      snakemake --use-conda --configfile templates/"$name"_assembly.yaml -s mlplasmidssnake.smk evaluation/"$name"_metrics.tab
  fi
else
  if [ "$reference" == "No reference provided" ];
  then
      snakemake --unlock --use-conda --configfile templates/"$name"_assembly.yaml -s plasflowsnake.smk results/"$name"_results.tab
      snakemake --use-conda --configfile templates/"$name"_assembly.yaml -s plasflowsnake.smk results/"$name"_results.tab
  else
      snakemake --unlock --configfile templates/"$name"_assembly.yaml --use-conda -s plasflowsnake.smk evaluation/"$name"_metrics.tab
      snakemake --use-conda --configfile templates/"$name"_assembly.yaml -s plasflowsnake.smk evaluation/"$name"_metrics.tab
  fi
fi

file_to_check=results/"$name"_results.tab

if [ -f "$file_to_check" ];
then
  cat figures/logo.txt
  echo -e "\n"
  echo -e "Congratulations! Prediction succesfully done.\n"
  echo -e "Input graph:" $input "\n"
  echo -e "Bacterial species: " $species "\n"
  echo -e "Classifier:" $classifier "\n"
  echo -e "Threshold for predicting plasmid-derived contigs: $threshold_prediction\n"
  echo -e "Number of plasmid walks created per node: $number_iterations\n"
  echo -e "Threshold of gplas scores: $filt_gplas\n"
  echo -e "Minimum frequency to consider an edge: $edge_gplas\n"
  echo -e "Modularity threshold used to partition the network: $modularity_threshold\n"
  echo -e "\n"

  echo -e "Your results are in results/ and walks/\n"
  echo -e "We hope it helps your research, thanks for using gplas!\n"
  echo -e "If you have used plasflow as a classifier please cite:
  Pawel S Krawczyk et al. PlasFlow: predicting plasmid sequences in metagenomic data using genome signatures, Nucleic Acids Research, doi: 10.1093/nar/gkx1321"
  echo -e "\n"
  echo -e "If you have used mlplasmids as a classifier please cite:
  Arredondo-Alonso et al. mlplasmids: a user-friendly tool to predict plasmid- and chromosome-derived sequences for single species, Microbial Genomics, doi: 10.1099/mgen.0.000224"
  echo -e "\n"

  echo -e "gplas version 0.8.0 - https://academic.oup.com/bioinformatics/article/36/12/3874/5818483"
else
  echo -e "Looks like no plasmids could be detected in your assembly graph\n"
  echo -e "Please check the file:   coverage/*_clean_prediction.tab    If all contigs were predicted as chromosome, gplas probably failed at the step to create random walks starting from plasmid seeds\n"
  echo -e "If that's the case, probably your isolate does not carry any plasmid(s)\n"
  echo -e "\n"
  echo -e "If you don't see any files present at:   gplas_input/  or  coverage/   most likely the installation of gplas failed at some point\n"
sleep 10s
  echo -e "If you have used plasflow as a classifier please cite:
  Pawel S Krawczyk et al. PlasFlow: predicting plasmid sequences in metagenomic data using genome signatures, Nucleic Acids Research, doi: 10.1093/nar/gkx1321"
  echo -e "\n"
  echo -e "If you have used mlplasmids as a classifier please cite:
  Arredondo-Alonso et al. mlplasmids: a user-friendly tool to predict plasmid- and chromosome-derived sequences for single species, Microbial Genomics, doi: 10.1099/mgen.0.000224"
  echo -e "Thank you for using gplas! gplas version 0.8.0 - https://academic.oup.com/bioinformatics/article/36/12/3874/5818483\n"
fi
